
grammar ASTify-grammar



// utilities
Type(Word name, bool optional, bool lst)
: .name .optional('?') .lst('[' ']')

TypedName(Type type, Word name)
: .type .name

MatcherTarget(Word property)
: .property

PatternList(RootPattern[] patterns)
: .patterns

NamedPropertyList(Word name, TypedName[] properties)
: .name '(' [.properties(',')] ')'

Call(Word functionName, Parameter[] parameters)
: .functionName '(' [.parameters(',')] ')'

Reference(Word reference)
: .reference

union Parameter
: Reference
: Call



// patterns
TypeReference(Word type)
: '@' .type

Terminal(String terminal)
: .terminal

Function(Keyword name, UncapturingPattern[] patterns)
: ('list' -> name) '(' (@UncapturingPattern -> patterns) ')'
: ('delim' -> name) '(' (@UncapturingPattern -> patterns) ',' (@UncapturingPattern -> patterns) ')'

Matcher(UncapturingPattern source, MatcherTarget targetProperty)
: '(' .source '->' .targetProperty ')'

// wrapper around Matcher
// without a qualifier: (@typeof(property) -> .property)
// with a qualifier (if property is a list): (delim(@typeof(property), qualifier) -> .property)
//                  (if property is an optional): [(qualifier -> .property)]
PropertyReference(Word property, UncapturingPattern[] qualifier)
: '.' .property ['(' .qualifier ')']

Optional(Pattern[] patterns)
: '[' .patterns ']'

// pattern unions
union UncapturingPattern
: TypeReference
: Terminal
: Function

union Pattern
: UncapturingPattern
: Matcher
: PropertyReference

union RootPattern
: Pattern
: Optional



// definitions
AbstractTypeDefinition(NamedPropertyList properties)
: 'abstract' .properties

TypeDefinition(NamedPropertyList properties, PatternList[] patterns)
: .properties ':' .patterns(':')

Union(Word typename, Word[] subtypes)
: 'union' .typename ':' .subtypes(':')

AliasDefinition(Word name, PatternList patternList)
: 'alias' .name ':' .patternList

ExternDefinition(Type returnType, Word name, TypedName[] parameters)
: 'extern' .returnType .name '(' [.parameters(',')] ')'

Extend(NamedPropertyList properties, PatternList patternList, Call call)
: 'extend' .properties ':' .patternList 'in' .call

// definition union
union Definition
: AbstractTypeDefinition
: TypeDefinition
: Union
: AliasDefinition
: ExternDefinition

union Statement
: Definition
: Extend



// grammar
Grammar(Word name)
: 'grammar' .name

ASTify-grammar(Grammar _grammar, Statement[] statements)
: ._grammar .statements @EOF


