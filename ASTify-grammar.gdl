
grammar GDL

////////////////////////////////////////////////////////////////////////////////

inline token Digit         :: '[0-9]'
inline token Letter        :: '[a-zA-Z]'
inline token LetterOrDigit :: '[a-zA-Z0-9]'

skip token Whitespace :: '[ \t]+'
skip token Newline    :: '\n'
skip token Comment    :: '/\\*.*\\*/|//.*\n'

token StringToken     :: '\'(\\\\.|[^\'])*\'|"(\\\\.|[^"])*"'
token IdentifierToken :: '{Letter}({LetterOrDigit}|_)*'
token IntegerToken    :: '{Digit}+'

keyword IdentifierToken -> KeywordToken
symbol SymbolToken

////////////////////////////////////////////////////////////////////////////////

GDL :: 'grammar' (IdentifierToken as grammarName) (many GDLStatement as statements)

GDLStatement {
    GDLTokenStatement {
        GDLSymbolSpecifier       :: 'symbol' (IdentifierToken as symbolToken)
        GDLKeywordTransformer    :: 'keyword' (IdentifierToken as sourceToken) '->' (IdentifierToken as keywordToken)
        GDLTokenDefinition       :: ('skip' as skip) ('inline' as inline) 'token' (IdentifierToken as name) '::' (StringToken as regex)
    }
    GDLRuleStatement {
        // GDLRule            :: (IdentifierToken as name) ['<' (IdentifierToken sepBy ',' as parameters} '>'] '::' (many GDLPattern as patterns) Newline
        // GDLAlternationRule :: (IdentifierToken as name) ['<' (IdentifierToken sepBy ',' as parameters} '>'] '{' (many GDLAlternationRuleStatement as statements) '}'
        GDLRule            :: (IdentifierToken as name) '::' (many GDLPattern as patterns) Newline
        GDLAlternationRule :: (IdentifierToken as name) '{' (many GDLAlternationRuleStatement as statements) '}'
    }
}

GDLOperatorPrefix {
    InfixL :: 'infixl' (IntegerToken as precedence)
    InfixR :: 'infixr' (IntegerToken as precedence)
    UnaryL :: 'unaryl' (IntegerToken as precedence)
    UnaryR :: 'unaryr' (IntegerToken as precedence)
}

GDLAlternationRuleStatement {
    GDLRule            :: [GDLOperatorPrefix as operator] (IdentifierToken as name) '::' (many GDLPattern as patterns) Newline
    GDLAlternationRule :: (IdentifierToken as name) '{' (many GDLAlternationRuleStatement as statements) '}'
}

GDLPattern {
    GDLLiteral       :: (StringToken as value)
    // GDLRuleReference :: ['inline' as inline] (IdentifierToken as reference) ['<' {GDLPattern as parameter ~ ','} '>'] ['as' ('?' as? q) (IdentifierToken as label)]
    GDLRuleReference :: (IdentifierToken as reference)
    GDLLabel         :: '(' (many GDLPattern as patterns) 'as' (IdentifierToken as name) ')'
    GDLSepBy         :: '(' (many GDLPattern as patterns) 'sepBy' ['+' as atLeast1] (many GDLPattern as delimiters) ['as' (IdentifierToken as label)] ')'
    GDLMany0         :: '(' 'many' ['+' as atLeast1] (many GDLPattern as patterns) ['as' (IdentifierToken as label)] ')'
    GDLOptional      :: '[' (many GDLPattern as patterns) ['as' (IdentifierToken as label)] ']'
}
