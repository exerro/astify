
grammar ExampleGrammar

////////////////////////////////////////////////////////////////////////////////

inline token Digit         :: '[0-9]'
inline token Letter        :: '[a-zA-Z]'
inline token LetterOrDigit :: '[a-zA-Z0-9]'

skip token Whitespace :: '[ \t]+'
skip token Newline    :: '\n'
skip token Comment    :: '/\\*.*\\*/|//.*\n'

token IdentifierToken :: '{Letter}({LetterOrDigit}|_)*'
token IntegerToken    :: '{Digit}+'

keyword IdentifierToken -> KeywordToken
symbol SymbolToken

////////////////////////////////////////////////////////////////////////////////

Type
    | Named :: name: IdentifierToken
    | List  :: '[' Type ']'

Statement
    | Declaration         :: Type name: IdentifierToken ['=' Value]
    | ExpressionStatement :: 'eval' Value
    
Value
    | LiteralInteger :: token: IntegerToken
    | LiteralString  :: token: StringToken
    | Identifier     :: token: IdentifierToken
    | infixl 1 Add   :: '+'
    | infixl 1 Sub   :: '-'
    | infixl 2 Mul   :: '*'
    | infixl 2 Div   :: '/'
    | infixl 3 Eq    :: '=='
    | infixl 3 Neq   :: '!='

ExampleGrammar :: {Statement *} EOF
